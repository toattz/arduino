#include<BluetoothSerial.h>
#include<WiFi.h>
#include<SPIFFS.h>
#include"json.h"
#include<ESPAsyncWebServer.h>


enum Status{
  WIFI_DISCONNECTED,
  WIFI_NOT_SCANNED,
  WIFI_SETUP_SSID,
  WIFI_SETUP_SSID_TO_WIFI_SETUP_PASSWORD,
  WIFI_SETUP_PASSWORD,
  WIFI_SETUP,
  WIFI_CONNECTING,
  WIFI_CONNECTED,
  WEB_UP
};

String ssidList="";
String uuid="";
const char *st[]={
  "wifi disconnected",
  "wifi not scanned",
  "wifi setup ssid",
  "wifi setup ssid to wifi setup password",
  "wifi setup password",
  "wifi setup",
  "wifi connecting",
  "wifi connected"
  };
char *pin="0000";
char val;
char ssid[128];
char password[128];
BluetoothSerial BT;
AsyncWebServer server(80);
Status status=WIFI_NOT_SCANNED;

/*config.json
 * {
 *   "init":0,//0:no,1:yes
 *   "version":"0.1",
 *   "onboard":0,//0:no,1,yes
 *   "uuid":"12345678",
 *   "connected":0,//0:not connected, 1:connected
 *   "ssid":"SSID",
 *   "password":"password", 
 * }
 */

void printFile(const char *filename)  //print JSON file
{
  // Open file for reading
  File file = SPIFFS.open(filename);
  if (!file) {
    Serial.println(F("Failed to read file"));
    return;
  }
 
  // Extract each characters by one by one
  while (file.available()) {
    Serial.print((char)file.read());
  }
  Serial.println();
 
  // Close the file
  file.close();
}

byte getInitStatus() //get initialized status, if 0 to generate uuid
{
  byte initStatus;
  File file=SPIFFS.open(CONFIG_FILE,"r");
  if(file&&file.size())
  {
    Serial.println("getInitStatus:There is config.json");   
    StaticJsonDocument<512> readDoc;
    DeserializationError error = deserializeJson(readDoc, file);
    if(error)
    {
      Serial.print(F("deserializeJson() failed: "));
      Serial.println(error.f_str());
      initStatus=2;
    }  
    else
    {
      initStatus=readDoc["init"];
    }
  }
  else
  {
    Serial.println("getInitStatus:No config.json");
    initStatus=3;
  }
  file.close();
  return initStatus;
}

void initConfig() // generate uuid when initailized is 0
{
  Serial.println("initConfig()");
  File readFile=SPIFFS.open(CONFIG_FILE,"r");
  if(readFile&&readFile.size())
  { 
    Serial.println("file&&file.size()");
    StaticJsonDocument<512> readDoc;
    DeserializationError error = deserializeJson(readDoc,readFile);
    readFile.close();
    if (error)
    {
      Serial.println("error");
      Serial.print(F("deserializeJson() failed: "));
      Serial.println(error.f_str());
    }
    else
    {
      Serial.println("no error");
      File writeFile=SPIFFS.open(CONFIG_FILE,"w");
      StaticJsonDocument<512> writeDoc;
      writeDoc["init"]=1;
      writeDoc["version"]=readDoc["version"];
      writeDoc["onboard"]=readDoc["onboard"];
      uuid=esp_random();
      writeDoc["uuid"]=uuid;
      writeDoc["connected"]=readDoc["connected"];
      writeDoc["ssid"]=readDoc["ssid"];
      writeDoc["password"]=readDoc["password"];
      if(serializeJson(writeDoc,writeFile)==0)
      {
        Serial.println(F("Failed to write to file when initConfig"));
      }
      writeFile.close();
    }
  }
  else
  {
    Serial.println("no file&&file.size()");
  }
}

void getUUID() //get uuid when initialized is 1 and boot the device
{
  File file=SPIFFS.open(CONFIG_FILE,"r");
  if(file&&file.size())
  { 
    StaticJsonDocument<512> readDoc;
    DeserializationError error = deserializeJson(readDoc,file);
    if (error)
    {
      Serial.print(F("deserializeJson() failed: "));
      Serial.println(error.f_str());
    }
    else
    {
      const char *uuid_1=readDoc["uuid"];
      uuid=String(uuid_1);
      Serial.println(uuid.c_str());
    }
  }
  else
  {
    
  }
  file.close();
}

byte getConnectedStatus() // get connected status when boot 
{
  byte connectedStatus;
  File file=SPIFFS.open(CONFIG_FILE,"r");
  if(file&&file.size())
  {
    Serial.println("getInitStatus:There is config.json");   
    StaticJsonDocument<512> readDoc;
    DeserializationError error = deserializeJson(readDoc, file);
    if(error)
    {
      Serial.print(F("deserializeJson() failed: "));
      Serial.println(error.f_str());
      connectedStatus=2;
    }  
    else
    {
      connectedStatus=readDoc["init"];
    }
  }
  else
  {
    Serial.println("getInitStatus:No config.json");
    connectedStatus=3;
  }
  file.close();  
  return connectedStatus;
}

char getSSID() //get ssid to connect to wifi when connected is 1
{
  
}

char getPassword()//get password to connect to wifi when connected is 1
{
  
}

void checkConfig()
{ 
  byte initStatus=getInitStatus();

  if(initStatus==1)
  {
    Serial.println("getInitStatus()==1");
    Serial.println("Initialized");
    getUUID();
  }
  else if(initStatus==0)
  {
    Serial.println("getInitStatus()==0");
    Serial.println("Not Initialized");
    initConfig();  
  }
  else if(initStatus==2)
  {
    Serial.println("deserializeJson() failed:");
  }
  else
  {
    Serial.println("No config.json");
  }
}

void scanWIFI()
{
  // Set WiFi to station mode and disconnect from an AP if it was previously connected
  WiFi.mode(WIFI_STA);
  WiFi.hostname(String("ESP32 ")+uuid);
  //WiFi.disconnect();
  delay(100);
  Serial.println("scan start");

  // WiFi.scanNetworks will return the number of networks found
  int n = WiFi.scanNetworks();
  Serial.println("scan done");
  if(n==0)
  {
    Serial.println("no networks found");
  }
  else
  {
    Serial.printf("%d networks found\n",n);
    BT.printf("%d networks found\n",n);
    StaticJsonDocument<1024> doc;
    JsonArray devices = doc.createNestedArray("devices");
    for (byte i = 0; i < n; ++i) 
    {
      if(i>5)
      {
        continue;
      }
      else
      {
        JsonObject device = devices.createNestedObject();
        device["id"]=i+1;
        device["ssid"]=WiFi.SSID(i);
        device["rssi"]=WiFi.RSSI(i);
        Serial.printf("%d. %s(%d)\n",i+1,WiFi.SSID(i).c_str(),WiFi.RSSI(i));
        BT.printf("%d. %s(%d)\n",i+1,WiFi.SSID(i).c_str(),WiFi.RSSI(i));
        delay(10);
      }
    }
    ssidList=""; 
    serializeJson(doc, ssidList);
    Serial.println(ssidList.c_str());
  }
  status=WIFI_DISCONNECTED;
}

void listWIFI()
{
  StaticJsonDocument<1024> doc;

  DeserializationError error = deserializeJson(doc, ssidList);

  if (error)
  {
    Serial.print(F("deserializeJson() failed: "));
    Serial.println(error.f_str());
    return;
  }

  for (JsonObject device : doc["devices"].as<JsonArray>())
  {
    int device_id = device["id"]; // 1, 2, 3, 4, 5, 6
    const char* device_ssid = device["ssid"]; // "DIRECT-ab-HP M28 LaserJet", "ZYXEL_1F", ...
    int device_rssi = device["rssi"]; // -42, -54, -68, -90, -91, -92
    Serial.printf("id:%d ssid:%s rssi:%d\n",device_id,device_ssid,device_rssi);
    BT.printf("id:%d ssid:%s rssi:%d\n",device_id,device_ssid,device_rssi);
  }
}

void setupSSID(int id)
{
  StaticJsonDocument<1024> doc;
  DeserializationError error = deserializeJson(doc, ssidList);
  if (error)
  {
    Serial.print(F("deserializeJson() failed: "));
    Serial.println(error.f_str());
    return;
  }
  for (JsonObject device : doc["devices"].as<JsonArray>())
  {
    int device_id = device["id"]; // 1, 2, 3, 4, 5, 6
    const char* device_ssid = device["ssid"]; // "DIRECT-ab-HP M28 LaserJet", "ZYXEL_1F", ...
    if(device_id==id)
    {
      strcpy(ssid,device_ssid);   
      Serial.printf("id:%d ssid:%s\n",id,ssid);
      BT.printf("id:%d ssid:%s\n",id,ssid);
    }
  }  
}

void setupPassword()
{

  
}

void saveWIFISetting() //save wifi connected status, ssid and password
{
  Serial.println("saveWIFISetting()");
  File readFile=SPIFFS.open(CONFIG_FILE,"r");
  if(readFile&&readFile.size())
  { 
    Serial.println("file&&file.size()");
    StaticJsonDocument<512> readDoc;
    DeserializationError error = deserializeJson(readDoc,readFile);
    readFile.close();
    if (error)
    {
      Serial.println("error");
      Serial.print(F("deserializeJson() failed: "));
      Serial.println(error.f_str());
    }
    else
    {
      Serial.println("no error");
      File writeFile=SPIFFS.open(CONFIG_FILE,"w");
      StaticJsonDocument<512> writeDoc;
      writeDoc["init"]=readDoc["init"];
      writeDoc["version"]=readDoc["version"];
      writeDoc["onboard"]=readDoc["onboard"];
      writeDoc["uuid"]=readDoc["uuid"];
      writeDoc["connected"]=1;
      writeDoc["ssid"]=ssid;
      writeDoc["password"]=password;
      if(serializeJson(writeDoc,writeFile)==0)
      {
        Serial.println(F("Failed to write to file when initConfig"));
      }
      writeFile.close();
    }
  }
  else
  {
    Serial.println("no file&&file.size()");
  } 
}
